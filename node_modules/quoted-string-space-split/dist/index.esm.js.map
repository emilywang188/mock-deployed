{
  "version": 3,
  "sources": ["../src/quoted-string-space-split.ts", "../src/index.ts"],
  "sourcesContent": ["export type ParsedValue = {\n\t/**\n\t * The type of the parsed group.\n\t *\n\t * - `plain` : The parsed group was split by spaces, but wasn't surrounded by quotes;\n\t * - `single` : The parsed group was split by spaces, and was surrounded by single quotes (`'`);\n\t * - `double` : The parsed group was split by spaces, and was surrounded by double quotes (`\"`);\n\t */\n\ttype: 'plain' | 'single' | 'double';\n\t/**\n\t * The text that this group contains (may contain spaces if the group was surrounded by quotes).\n\t */\n\tvalue: string;\n};\n\n/**\n * This function splits spaces and creates an array of object defining both the type of group (based on quotes) and the value (text) of the group.\n * @param string The string to split.\n * @see splitSpacesExcludeQuotes\n */\nexport function splitSpacesExcludeQuotesDetailed(string: string): ParsedValue[] {\n\tconst groupsRegex = /[^\\s\"']+|(?:\"|'){2,}|\"(?!\")([^\"]*)\"|'(?!')([^']*)'|\"|'/g;\n\n\tconst matches: ParsedValue[] = [];\n\n\tlet match;\n\n\twhile ((match = groupsRegex.exec(string))) {\n\t\tif (match[2]) {\n\t\t\t// Single quoted group\n\t\t\tmatches.push({ type: 'single', value: match[2] });\n\t\t} else if (match[1]) {\n\t\t\t// Double quoted group\n\t\t\tmatches.push({ type: 'double', value: match[1] });\n\t\t} else {\n\t\t\t// No quote group present\n\t\t\tmatches.push({ type: 'plain', value: match[0]! });\n\t\t}\n\t}\n\n\treturn matches;\n}\n\n/**\n * This function splits spaces and creates an array of strings, like if you were to use `String.split(...)`, but without splitting the spaces in between quotes.\n * @param string The string to split.\n * @see splitSpacesExcludeQuotesDetailed\n */\nexport function splitSpacesExcludeQuotes(string: string): string[] {\n\treturn splitSpacesExcludeQuotesDetailed(string).map((details) => details.value);\n}\n\nexport default splitSpacesExcludeQuotes;\n", "import splitSpacesExcludeQuotes from './quoted-string-space-split';\n\nexport * from './quoted-string-space-split';\n\nexport default splitSpacesExcludeQuotes;\n"],
  "mappings": ";AAoBO,0CAA0C,QAA+B;AAC/E,QAAM,cAAc;AAEpB,QAAM,UAAyB,CAAC;AAEhC,MAAI;AAEJ,SAAQ,QAAQ,YAAY,KAAK,MAAM,GAAI;AAC1C,QAAI,MAAM,IAAI;AAEb,cAAQ,KAAK,EAAE,MAAM,UAAU,OAAO,MAAM,GAAG,CAAC;AAAA,IACjD,WAAW,MAAM,IAAI;AAEpB,cAAQ,KAAK,EAAE,MAAM,UAAU,OAAO,MAAM,GAAG,CAAC;AAAA,IACjD,OAAO;AAEN,cAAQ,KAAK,EAAE,MAAM,SAAS,OAAO,MAAM,GAAI,CAAC;AAAA,IACjD;AAAA,EACD;AAEA,SAAO;AACR;AAOO,kCAAkC,QAA0B;AAClE,SAAO,iCAAiC,MAAM,EAAE,IAAI,CAAC,YAAY,QAAQ,KAAK;AAC/E;AAEA,IAAO,oCAAQ;;;AChDf,IAAO,cAAQ;",
  "names": []
}
